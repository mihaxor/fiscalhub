name: Release Version Workflow
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches:
      - master
    paths-ignore:
      - .github/workflows/release-candidate-version.yml
      - .github/workflows/deploy-vercel-pp.yml
      - .github/workflows/deploy-vercel-prod.yml
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Choose version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  Bump-Version:
    runs-on: ubuntu-latest
    if: |
      github.actor != 'github-actions[bot]' &&
      github.actor != 'dependabot[bot]'
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog from previous tag
        run: |
          echo "## Changelog" > ${{ github.workspace }}/CHANGELOG.txt
          echo "" >> ${{ github.workspace }}/CHANGELOG.txt
          git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:'- %s' >> ${{ github.workspace }}/CHANGELOG.txt

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: |
          corepack enable
          yarn install

      - name: Determine bump type
        id: bump
        run: |
          echo "type=${{ github.event.inputs.bump_type || 'patch' }}" >> $GITHUB_OUTPUT

      - name: Bump version
        run: |
          npm version ${{ steps.bump.outputs.type }} -m "%s"
        env:
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com

      - name: Push changes
        run: |
          git push origin HEAD --follow-tags

      - name: Get latest tag
        id: get_tag
        run: |
          echo "tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: Release ${{ steps.get_tag.outputs.tag }}
          body_path: ${{ github.workspace }}/CHANGELOG.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Deploy-Vercel-PP:
    runs-on: ubuntu-latest
    needs: [ Bump-Version ]
    if: success()
    environment: Pre-Production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Pull latest changes
        run: |
          git fetch origin ${{ github.ref_name }}
          git reset --hard origin/${{ github.ref_name }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NEXT_APP_BNR_RATES_API_URL: ${{ secrets.NEXT_APP_BNR_RATES_API_URL }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  Deploy-Vercel-PROD:
    runs-on: ubuntu-latest
    needs: [ Deploy-Vercel-PP ]
    if: success()
    environment: Production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Pull latest changes
        run: |
          git fetch origin ${{ github.ref_name }}
          git reset --hard origin/${{ github.ref_name }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NEXT_APP_BNR_RATES_API_URL: ${{ secrets.NEXT_APP_BNR_RATES_API_URL }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}